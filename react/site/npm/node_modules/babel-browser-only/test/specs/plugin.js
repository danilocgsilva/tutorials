import 'babel-polyfill';
import test from 'tape';
import path from 'path';
import { types, traverse, transformFileSync, transform } from 'babel-core';
import * as babylon from 'babylon';
import generate from 'babel-generator';
import plugin, { defaultDisregard, wrapPath } from '../../lib/index';

const falsifyNodePath = (callback, importCode=`import './css/test.css';`) => {
  const importAst = babylon.parse(importCode, {sourceType: 'module'});
  const callNodeType = nodePath => {
    callback(importCode, importAst, nodePath);
    clearVisitor();
  };
  const clearVisitor = () => {
    for ( let prop in importVisitor ) {
      delete importVisitor[prop];
    };
  };
  let importVisitor = {
    ImportDeclaration: callNodeType,
    ExpressionStatement: callNodeType,
  };
  traverse(importAst, importVisitor);
};
const revertPath = (nodePath, src='./css/test.css') => {
  nodePath.replaceWith(
    types.callExpression(types.identifier('require'), [types.stringLiteral(src)])
  );
};
const generateAst = (importAst, importCode) => {
  return generate(importAst, null, importCode);
};
const testWrapPath = (t, importCode) => {
  falsifyNodePath((importCode, importAst, nodePath) => {
    t.test(`> Test code transformation by "${importCode}"`, t => {
      let state = { opts: { disregard: defaultDisregard } };
      defaultDisregard.forEach(extension => {
        let src = `./test${extension}`;
        wrapPath(types, nodePath, state, src);
        let { code } = generateAst(importAst, importCode);
        t.ok(
          code.includes(`process.env.BROWSER && require('${src}');`),
          '[dynamic] test import code'
        );
      });
      revertPath(nodePath);
      t.end();
    });
  }, importCode);
};

test('● Test wrapPath', t => {
  testWrapPath(t, `import './css/test.css';`);
  testWrapPath(t, `require('./css/test.css');`);

  falsifyNodePath((importCode, importAst, nodePath) => {
    t.test('> Test settings from opts', t => {
      let defaultDisregardStr = JSON.stringify(defaultDisregard);
      let state = { opts: {} };
      let disregard = wrapPath(types, nodePath, state);
      t.equal(
        disregard,
        defaultDisregard,
        `if no settings, the disregard list is default ${defaultDisregardStr}`
      );
      revertPath(nodePath);
      t.end();
    });

    t.test('> Test custom disregard list', t => {
      let customDisregard = ['.css', '.less'];
      let state = { opts: { disregard: customDisregard } };
      let disregard = wrapPath(types, nodePath, state);
      t.notDeepEqual(
        disregard,
        defaultDisregard,
        `disregard list is from opts.disregard`
      );
      t.end();
    });

    t.end();
  });
});

test('● Test Plugin', t => {
  const files = ['test.css', 'test.scss', 'test.sass', 'test.less'];
  const testFile = path.resolve(__dirname, '../test.js');
  t.test('> Test code transformation', t => {
    let { code } = transformFileSync(testFile, {
      plugins: [plugin]
    });
    files.forEach(name => {
      let transformedCode = `process.env.BROWSER && require('./css/${name}');`;
      t.ok(code.includes(transformedCode), '[dynamic] test import code');
    });
    t.end();
  });

  t.test('> Test loading file by a variable. e.g. rquire(cssFileName)', t => {
    transform
    let { code } = transform(`
      let cssFileName = './test.css';
      require(cssFileName);
    `, {
      plugins: [plugin]
    });
    let transformedCode = `process.env.BROWSER && require(cssFileName);`;
    t.notOk(code.includes(transformedCode), 'plugin does not support loading file by a variable');
    t.end();
  });

  t.end();
});
