export const defaultDisregard = ['.css', '.scss', '.sass', '.less'];

export const wrapPath = (t, path, state, src='') => {
  const { opts: { disregard=defaultDisregard } } = state;
  if ( src && Array.isArray(disregard) && disregard.length ) {
    let splits = src.split('.');
    let extension = splits[splits.length - 1];
    if ( extension && disregard.indexOf(`.${extension}`) !== -1 ) {
      // process.env.BROWSER && require('path');
      path.replaceWith(
        t.logicalExpression(
          '&&',
          t.memberExpression(
            t.memberExpression(t.identifier('process'), t.identifier('env')),
            t.identifier('BROWSER')
          ),
          t.callExpression(t.identifier('require'), [t.stringLiteral(src)])
        )
      );
    }
  }
  return disregard;
};

export default function({ types: t }) {
  return {
    visitor: {
      ImportDeclaration(path, state) {
        wrapPath(t, path, state, path.node.source.value);
      },
      ExpressionStatement(path, state) {
        let { expression: { type, callee={}, arguments: args=[{}] } } = path.node;
        if ( type === 'CallExpression'
            && callee.name === 'require'
            && args.length
            && args[0].value ) {
          wrapPath(t, path, state, args[0].value);
        }
      }
    }
  };
};
